// Code generated by go-swagger; DO NOT EDIT.

package albums

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new albums API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for albums API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAlbums(params *GetAlbumsParams, opts ...ClientOption) (*GetAlbumsOK, error)

	GetAlbumsByID(params *GetAlbumsByIDParams, opts ...ClientOption) (*GetAlbumsByIDOK, error)

	GetAlbumsByUser(params *GetAlbumsByUserParams, opts ...ClientOption) (*GetAlbumsByUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAlbums get all albums owned by or shared with the current logged user
*/
func (a *Client) GetAlbums(params *GetAlbumsParams, opts ...ClientOption) (*GetAlbumsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlbumsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlbums",
		Method:             "GET",
		PathPattern:        "/api/gphotos/v1/albums",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlbumsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlbumsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlbums: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAlbumsByID get album by id
*/
func (a *Client) GetAlbumsByID(params *GetAlbumsByIDParams, opts ...ClientOption) (*GetAlbumsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlbumsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlbumsByID",
		Method:             "GET",
		PathPattern:        "/api/gphotos/v1/albums/{album_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlbumsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlbumsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlbumsByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAlbumsByUser get all user's album with the logged user can access
*/
func (a *Client) GetAlbumsByUser(params *GetAlbumsByUserParams, opts ...ClientOption) (*GetAlbumsByUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlbumsByUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlbumsByUser",
		Method:             "GET",
		PathPattern:        "/api/gphotos/v1/albums/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlbumsByUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlbumsByUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlbumsByUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
