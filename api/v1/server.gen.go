// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (DELETE /api/gphotos/v1/album/{album_id}/photo/{photo_id})
	DeletePhoto(c *gin.Context, albumId AlbumId, photoId PhotoId)

	// (GET /api/gphotos/v1/album/{album_id}/photo/{photo_id})
	GetPhoto(c *gin.Context, albumId AlbumId, photoId PhotoId)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (POST /api/gphotos/v1/albums)
	CreateAlbum(c *gin.Context)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId GroupId, params GetAlbumsByGroupParams)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId UserId, params GetAlbumsByUserParams)

	// (DELETE /api/gphotos/v1/albums/{album_id})
	DeleteAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id})
	GetAlbumByID(c *gin.Context, albumId AlbumId)

	// (PATCH /api/gphotos/v1/albums/{album_id})
	UpdateAlbum(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/albums/{album_id}/permissions)
	RemoveAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (POST /api/gphotos/v1/albums/{album_id}/permissions)
	SetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/photos)
	GetAlbumPhotos(c *gin.Context, albumId AlbumId, params GetAlbumPhotosParams)

	// (POST /api/gphotos/v1/albums/{album_id}/photos)
	UploadPhoto(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	RemoveTagFromAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (POST /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	SetTagToAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (GET /api/gphotos/v1/albums/{album_id}/thumbnail)
	GetAlbumThumbnail(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/groups)
	GetGroups(c *gin.Context)

	// (GET /api/gphotos/v1/tags)
	GetTags(c *gin.Context, params GetTagsParams)

	// (POST /api/gphotos/v1/tags)
	CreateTag(c *gin.Context)

	// (DELETE /api/gphotos/v1/tags/{tag_id})
	DeleteTag(c *gin.Context, tagId TagId)

	// (PATCH /api/gphotos/v1/tags/{tag_id})
	UpdateTag(c *gin.Context, tagId TagId)

	// (GET /api/gphotos/v1/users)
	GetUsers(c *gin.Context)

	// (GET /api/gphotos/v1/users/{user_id}/groups/related)
	GetRelatedGroups(c *gin.Context, userId UserId)

	// (GET /api/gphotos/v1/users/{user_id}/related)
	GetRelatedUsers(c *gin.Context, userId UserId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// DeletePhoto operation middleware
func (siw *ServerInterfaceWrapper) DeletePhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "photo_id" -------------
	var photoId PhotoId

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter photo_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeletePhoto(c, albumId, photoId)
}

// GetPhoto operation middleware
func (siw *ServerInterfaceWrapper) GetPhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "photo_id" -------------
	var photoId PhotoId

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter photo_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPhoto(c, albumId, photoId)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	// ------------- Optional query parameter "personal" -------------
	if paramValue := c.Query("personal"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "personal", c.Request.URL.Query(), &params.Personal)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter personal: %s", err)})
		return
	}

	// ------------- Optional query parameter "shared" -------------
	if paramValue := c.Query("shared"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shared", c.Request.URL.Query(), &params.Shared)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter shared: %s", err)})
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := c.Query("search"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter search: %s", err)})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateAlbum(c)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId GroupId

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByGroupParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId, params)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByUserParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId, params)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAlbum(c, albumId)
}

// GetAlbumByID operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumByID(c, albumId)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateAlbum(c, albumId)
}

// RemoveAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) RemoveAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveAlbumPermissions(c, albumId)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId)
}

// SetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) SetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetAlbumPermissions(c, albumId)
}

// GetAlbumPhotos operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPhotos(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumPhotosParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPhotos(c, albumId, params)
}

// UploadPhoto operation middleware
func (siw *ServerInterfaceWrapper) UploadPhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UploadPhoto(c, albumId)
}

// RemoveTagFromAlbum operation middleware
func (siw *ServerInterfaceWrapper) RemoveTagFromAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveTagFromAlbum(c, albumId, tagId)
}

// SetTagToAlbum operation middleware
func (siw *ServerInterfaceWrapper) SetTagToAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetTagToAlbum(c, albumId, tagId)
}

// GetAlbumThumbnail operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumThumbnail(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumThumbnail(c, albumId)
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroups(c)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTags(c, params)
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateTag(c)
}

// DeleteTag operation middleware
func (siw *ServerInterfaceWrapper) DeleteTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteTag(c, tagId)
}

// UpdateTag operation middleware
func (siw *ServerInterfaceWrapper) UpdateTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateTag(c, tagId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUsers(c)
}

// GetRelatedGroups operation middleware
func (siw *ServerInterfaceWrapper) GetRelatedGroups(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRelatedGroups(c, userId)
}

// GetRelatedUsers operation middleware
func (siw *ServerInterfaceWrapper) GetRelatedUsers(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRelatedUsers(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/album/:album_id/photo/:photo_id", wrapper.DeletePhoto)

	router.GET(options.BaseURL+"/api/gphotos/v1/album/:album_id/photo/:photo_id", wrapper.GetPhoto)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums", wrapper.CreateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.DeleteAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.GetAlbumByID)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.UpdateAlbum)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.RemoveAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.SetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.GetAlbumPhotos)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.UploadPhoto)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.RemoveTagFromAlbum)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.SetTagToAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/thumbnail", wrapper.GetAlbumThumbnail)

	router.GET(options.BaseURL+"/api/gphotos/v1/groups", wrapper.GetGroups)

	router.GET(options.BaseURL+"/api/gphotos/v1/tags", wrapper.GetTags)

	router.POST(options.BaseURL+"/api/gphotos/v1/tags", wrapper.CreateTag)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.DeleteTag)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.UpdateTag)

	router.GET(options.BaseURL+"/api/gphotos/v1/users", wrapper.GetUsers)

	router.GET(options.BaseURL+"/api/gphotos/v1/users/:user_id/groups/related", wrapper.GetRelatedGroups)

	router.GET(options.BaseURL+"/api/gphotos/v1/users/:user_id/related", wrapper.GetRelatedUsers)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Zv9PAAAA//+0V+Ky2WwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
