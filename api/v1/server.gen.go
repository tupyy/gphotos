// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId string)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId string)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId string)

	// (GET /api/gphotos/v1/albums/{album_id}/photos)
	GetAlbumPhotos(c *gin.Context, albumId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := c.Query("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter filter: %s", err)})
		return
	}

	// ------------- Optional query parameter "personal" -------------
	if paramValue := c.Query("personal"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "personal", c.Request.URL.Query(), &params.Personal)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter personal: %s", err)})
		return
	}

	// ------------- Optional query parameter "shared" -------------
	if paramValue := c.Query("shared"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shared", c.Request.URL.Query(), &params.Shared)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter shared: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId string

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId)
}

// GetAlbumPhotos operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPhotos(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId string

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPhotos(c, albumId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.RouterGroup, si ServerInterface, options GinServerOptions) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.GetAlbumPhotos)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYX2/bNhD/KgQ7IC9GlDbdHvy2AVuQhzVBh/YlMApKOltsJVI9npJ4hr/7QFK0LYmW",
	"7XQp2jxJFo/393c/Hr3ima5qrUCR4dMVN1kBlXCvv5dpU9kXUZY3cz69W/FfEOZ8yl8l201JuyO5ST9D",
	"Ru9hDggqA76erHiNugYkCU5h2mRfgOxbDiZDWZPUik95Lahges6oAOZl2EMBCKyCXAomDTOkEXI+4bSs",
	"gU+5IZRqwdcTniEIgvyTiOh1a1IrlgsCJhVrlHxkJCswJKqaT/hcY2V3cqnot7db/VIRLACtgY7KvoWd",
	"XyEA4bIW8bTUmYhrCSsHVShRwXC7/Xpwq35QgHbvaSXkNWAljZFauRJ2C1o4XauhtS9S5ZGF9cYx7Sw5",
	"A4Um/Uy6SSyeS3PRVKkSshyWo8EyVGMjdaA86wlH+NpIi/HpXeiTDrjb4s8GvszWE9+pt2OVEqGXTyz/",
	"AnVTOw2SoDKHNFxZ8V1HtrkTiGJpfzcG8HiNHwzgqMJYdVw+9mXheNueACMh1GIR68OmSgFDqZ1Ml2Eu",
	"30QZxsh/R7U5ry19iROUkibhwHlQNpbAQR0HqXTA+HY+2dRh0IyDKu92iLfe1TaLxNF34HgukPmJFLHr",
	"ntPqdLQ7Yr7dWuL7Hsdr50h10LSWx4/VuSzh8GljpWK7R9jRnfWk4/ToHIvSY4T0bvccHE+lug0Uj+IG",
	"X72j2KhPYQOPn9gTnkpPjrSH1V3jrcYYWj8CWpm/gUQuSPyfuM10WUJGg/CfqD/m/aEizdb2o1Rz15Ak",
	"qbSri3Y2mfB7H7314eOf7/+5vnn3yg1VNShRSz7ll+cX568tIQkqnPOJqGXSKkjuXzvKjDXnAohZu5ak",
	"7QgoUt0QE/dCliItgbWWrRM2Z07oOudTfgXUr4ktrKm1Mj6vby4ufHoVgXKmRV2X0s+ayWfjR1Gfx0Mo",
	"6pty+epG0nrKqo3MhL+9eD0M+Z0mJhoqQJF1BnIr+at3tjdKKXisISPIGSBqZDrLGovb9Wa4uwvINHxm",
	"v/bynmyP/L3pF2Xpz1jD7JScs3TJNDJTCIScPUhLWAWwrEEERazUiwXkzHVKpCjt7GGhgKICcsPOXd+u",
	"0Uis0rmlT2k/fG0Al2HK8+t8slOcASUOiXVheXlu3OQY07lZ3Go9Yjjo23GDBetNJ8ZSOgI1qPYYL2Ul",
	"v9n2XJYEyOCxRnCUtceYlzstf3OgrGA1oNFKBEDs0R+kYhZSrUsQKmbCJygAa9SClxnXP3vGfm9RHGnz",
	"Uhraqfu+jtntkqOJ4NyLXg5F/9KYyjwHdb6XLK4VAdrSOapo5S73WA38et6hkjbqESJJ/IUoWbnnJ5mv",
	"D1KLTcGZaaf4UVLBA6Tyx/IqzL1j3CLzME+FMVmGyWsLsOA/350GCBsYa5ofAHEhg+mSnYUYzl425NyF",
	"OVnZx3cH3Ae/fiTenMkzTwoYx10bxU8JO4+6NoIXDrqVe1q8Jb3rSRR7CIQS7v39MmTOJoUJlXseYt2b",
	"Rhxytx2ZU2AXh1uI4sfCW+cPrSHyTk3mS8Xd5oJ/POT8nj4w9mAt3O5eIMza2I4FVyxtPyGq1hNuAO9D",
	"IRss+ZQn9nr/XwAAAP//Tabi/ucaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
