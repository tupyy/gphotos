// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (POST /api/gphotos/v1/albums)
	CreateAlbum(c *gin.Context)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId GroupId, params GetAlbumsByGroupParams)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId UserId, params GetAlbumsByUserParams)

	// (DELETE /api/gphotos/v1/albums/{album_id})
	DeleteAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id})
	GetAlbumByID(c *gin.Context, albumId AlbumId)

	// (PATCH /api/gphotos/v1/albums/{album_id})
	UpdateAlbum(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/albums/{album_id}/permissions)
	RemoveAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (POST /api/gphotos/v1/albums/{album_id}/permissions)
	SetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/photos)
	GetAlbumPhotos(c *gin.Context, albumId AlbumId, params GetAlbumPhotosParams)

	// (POST /api/gphotos/v1/albums/{album_id}/photos)
	UploadPhoto(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	RemoveTagFromAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (POST /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	SetTagToAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (GET /api/gphotos/v1/albums/{album_id}/thumbnail)
	GetAlbumThumbnail(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/groups)
	GetGroups(c *gin.Context)

	// (DELETE /api/gphotos/v1/photo/{photo_id})
	DeletePhoto(c *gin.Context, photoId PhotoId)

	// (GET /api/gphotos/v1/photo/{photo_id})
	GetPhoto(c *gin.Context, photoId PhotoId)

	// (GET /api/gphotos/v1/tags)
	GetTags(c *gin.Context, params GetTagsParams)

	// (POST /api/gphotos/v1/tags)
	CreateTag(c *gin.Context)

	// (DELETE /api/gphotos/v1/tags/{tag_id})
	DeleteTag(c *gin.Context, tagId TagId)

	// (PATCH /api/gphotos/v1/tags/{tag_id})
	UpdateTag(c *gin.Context, tagId TagId)

	// (GET /api/gphotos/v1/users)
	GetUsers(c *gin.Context)

	// (GET /api/gphotos/v1/users/{user_id}/groups/related)
	GetRelatedGroups(c *gin.Context, userId UserId)

	// (GET /api/gphotos/v1/users/{user_id}/related)
	GetRelatedUsers(c *gin.Context, userId UserId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	// ------------- Optional query parameter "personal" -------------
	if paramValue := c.Query("personal"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "personal", c.Request.URL.Query(), &params.Personal)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter personal: %s", err)})
		return
	}

	// ------------- Optional query parameter "shared" -------------
	if paramValue := c.Query("shared"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shared", c.Request.URL.Query(), &params.Shared)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter shared: %s", err)})
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := c.Query("search"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter search: %s", err)})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateAlbum(c)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId GroupId

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByGroupParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId, params)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByUserParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId, params)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAlbum(c, albumId)
}

// GetAlbumByID operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumByID(c, albumId)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateAlbum(c, albumId)
}

// RemoveAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) RemoveAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveAlbumPermissions(c, albumId)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId)
}

// SetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) SetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetAlbumPermissions(c, albumId)
}

// GetAlbumPhotos operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPhotos(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumPhotosParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPhotos(c, albumId, params)
}

// UploadPhoto operation middleware
func (siw *ServerInterfaceWrapper) UploadPhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UploadPhoto(c, albumId)
}

// RemoveTagFromAlbum operation middleware
func (siw *ServerInterfaceWrapper) RemoveTagFromAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveTagFromAlbum(c, albumId, tagId)
}

// SetTagToAlbum operation middleware
func (siw *ServerInterfaceWrapper) SetTagToAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetTagToAlbum(c, albumId, tagId)
}

// GetAlbumThumbnail operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumThumbnail(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumThumbnail(c, albumId)
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGroups(c)
}

// DeletePhoto operation middleware
func (siw *ServerInterfaceWrapper) DeletePhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "photo_id" -------------
	var photoId PhotoId

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter photo_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeletePhoto(c, photoId)
}

// GetPhoto operation middleware
func (siw *ServerInterfaceWrapper) GetPhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "photo_id" -------------
	var photoId PhotoId

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter photo_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPhoto(c, photoId)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTags(c, params)
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateTag(c)
}

// DeleteTag operation middleware
func (siw *ServerInterfaceWrapper) DeleteTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteTag(c, tagId)
}

// UpdateTag operation middleware
func (siw *ServerInterfaceWrapper) UpdateTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateTag(c, tagId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUsers(c)
}

// GetRelatedGroups operation middleware
func (siw *ServerInterfaceWrapper) GetRelatedGroups(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRelatedGroups(c, userId)
}

// GetRelatedUsers operation middleware
func (siw *ServerInterfaceWrapper) GetRelatedUsers(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRelatedUsers(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums", wrapper.CreateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.DeleteAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.GetAlbumByID)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.UpdateAlbum)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.RemoveAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.SetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.GetAlbumPhotos)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.UploadPhoto)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.RemoveTagFromAlbum)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.SetTagToAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/thumbnail", wrapper.GetAlbumThumbnail)

	router.GET(options.BaseURL+"/api/gphotos/v1/groups", wrapper.GetGroups)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/photo/:photo_id", wrapper.DeletePhoto)

	router.GET(options.BaseURL+"/api/gphotos/v1/photo/:photo_id", wrapper.GetPhoto)

	router.GET(options.BaseURL+"/api/gphotos/v1/tags", wrapper.GetTags)

	router.POST(options.BaseURL+"/api/gphotos/v1/tags", wrapper.CreateTag)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.DeleteTag)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.UpdateTag)

	router.GET(options.BaseURL+"/api/gphotos/v1/users", wrapper.GetUsers)

	router.GET(options.BaseURL+"/api/gphotos/v1/users/:user_id/groups/related", wrapper.GetRelatedGroups)

	router.GET(options.BaseURL+"/api/gphotos/v1/users/:user_id/related", wrapper.GetRelatedUsers)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
