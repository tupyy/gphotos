// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (POST /api/gphotos/v1/albums)
	CreateAlbum(c *gin.Context)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId GroupID, params GetAlbumsByGroupParams)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId UserID, params GetAlbumsByUserParams)

	// (DELETE /api/gphotos/v1/albums/{album_id})
	DeleteAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id})
	GetAlbumByID(c *gin.Context, albumId AlbumId)

	// (PATCH /api/gphotos/v1/albums/{album_id})
	UpdateAlbum(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/albums/{album_id}/permissions)
	RemoveAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (POST /api/gphotos/v1/albums/{album_id}/permissions)
	SetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/photos)
	GetAlbumPhotos(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	RemoveTagFromAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (POST /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	SetTagToAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (GET /api/gphotos/v1/tags)
	GetTags(c *gin.Context, params GetTagsParams)

	// (POST /api/gphotos/v1/tags)
	CreateTag(c *gin.Context)

	// (DELETE /api/gphotos/v1/tags/{tag_id})
	DeleteTag(c *gin.Context, tagId TagId)

	// (PATCH /api/gphotos/v1/tags/{tag_id})
	UpdateTag(c *gin.Context, tagId TagId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	// ------------- Optional query parameter "personal" -------------
	if paramValue := c.Query("personal"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "personal", c.Request.URL.Query(), &params.Personal)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter personal: %s", err)})
		return
	}

	// ------------- Optional query parameter "shared" -------------
	if paramValue := c.Query("shared"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shared", c.Request.URL.Query(), &params.Shared)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter shared: %s", err)})
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := c.Query("search"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter search: %s", err)})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateAlbum(c)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId GroupID

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByGroupParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId, params)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByUserParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId, params)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAlbum(c, albumId)
}

// GetAlbumByID operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumByID(c, albumId)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateAlbum(c, albumId)
}

// RemoveAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) RemoveAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveAlbumPermissions(c, albumId)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId)
}

// SetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) SetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetAlbumPermissions(c, albumId)
}

// GetAlbumPhotos operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPhotos(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPhotos(c, albumId)
}

// RemoveTagFromAlbum operation middleware
func (siw *ServerInterfaceWrapper) RemoveTagFromAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveTagFromAlbum(c, albumId, tagId)
}

// SetTagToAlbum operation middleware
func (siw *ServerInterfaceWrapper) SetTagToAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetTagToAlbum(c, albumId, tagId)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTags(c, params)
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateTag(c)
}

// DeleteTag operation middleware
func (siw *ServerInterfaceWrapper) DeleteTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteTag(c, tagId)
}

// UpdateTag operation middleware
func (siw *ServerInterfaceWrapper) UpdateTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateTag(c, tagId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums", wrapper.CreateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.DeleteAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.GetAlbumByID)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.UpdateAlbum)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.RemoveAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.SetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.GetAlbumPhotos)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.RemoveTagFromAlbum)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.SetTagToAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/tags", wrapper.GetTags)

	router.POST(options.BaseURL+"/api/gphotos/v1/tags", wrapper.CreateTag)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.DeleteTag)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.UpdateTag)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
