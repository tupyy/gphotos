// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId string, params GetAlbumsByGroupParams)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId string, params GetAlbumsByUserParams)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId string, params GetAlbumPermissionsParams)

	// (GET /api/gphotos/v1/auth/callback)
	GetApiGphotosV1AuthCallback(c *gin.Context, params GetApiGphotosV1AuthCallbackParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "cookie" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("cookie")]; found {
		var Cookie string
		n := len(valueList)
		if n != 1 {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Expected one value for cookie, got %d", n)})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "cookie", runtime.ParamLocationHeader, valueList[0], &Cookie)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cookie: %s", err)})
			return
		}

		params.Cookie = &Cookie

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByGroupParams

	headers := c.Request.Header

	// ------------- Optional header parameter "cookie" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("cookie")]; found {
		var Cookie string
		n := len(valueList)
		if n != 1 {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Expected one value for cookie, got %d", n)})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "cookie", runtime.ParamLocationHeader, valueList[0], &Cookie)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cookie: %s", err)})
			return
		}

		params.Cookie = &Cookie

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId, params)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByUserParams

	headers := c.Request.Header

	// ------------- Optional header parameter "cookie" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("cookie")]; found {
		var Cookie string
		n := len(valueList)
		if n != 1 {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Expected one value for cookie, got %d", n)})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "cookie", runtime.ParamLocationHeader, valueList[0], &Cookie)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cookie: %s", err)})
			return
		}

		params.Cookie = &Cookie

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId, params)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId string

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumPermissionsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "cookie" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("cookie")]; found {
		var Cookie string
		n := len(valueList)
		if n != 1 {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Expected one value for cookie, got %d", n)})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "cookie", runtime.ParamLocationHeader, valueList[0], &Cookie)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cookie: %s", err)})
			return
		}

		params.Cookie = &Cookie

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId, params)
}

// GetApiGphotosV1AuthCallback operation middleware
func (siw *ServerInterfaceWrapper) GetApiGphotosV1AuthCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiGphotosV1AuthCallbackParams

	// ------------- Optional query parameter "code" -------------
	if paramValue := c.Query("code"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter code: %s", err)})
		return
	}

	// ------------- Optional query parameter "state" -------------
	if paramValue := c.Query("state"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter state: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiGphotosV1AuthCallback(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.RouterGroup, si ServerInterface, options GinServerOptions) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/auth/callback", wrapper.GetApiGphotosV1AuthCallback)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTY/bNhP+KwTzAnvxu9rNpj34lhbtIocmQdrksjCCkTSWmJVIhRxt4hr+7wVJ0bYk",
	"2rKTtEA3Pa1NDufjmWeGQ++aZ6pulERJhs/X3GQl1uA+Pq/StrYfoKpeLfn8bs3/p3HJ5/xJsjuUdCeS",
	"V+kHzOgNLlGjzJBvZmveaNWgJoFOYdpm90j2U44m06IhoSSf8waoZGrJqETmZdinEjWyGnMBTBhmSGnM",
	"+YzTqkE+54a0kAXfzHimEQjz9xDR6/aEkiwHQiYka6X4zEjUaAjqhs/4UunanuRC0o/PdvqFJCxQWwM9",
	"lUMLe99CAOBQi3haqQziWsLOpAoJNY6P29XJowSFy4EgrN2HY6n8A/wZrwS0hpX7XrZ1KkFUYx9aXQUX",
	"tlITPm1mXOPHVtjEzu8COXoZ7SJebM8qxzG+WWxmnp6vUdfCGKGkC6rPt0Krtjk96lsrvq8wAkFrUJ+u",
	"8a1BfVThZhRZF1ckGtiun2zbV3AkjAaKGJHaOkUd0uZk+iVy8zRaIkb8eVSb89zWH5yhlBSBI9qkbAzE",
	"US7j5JgCcdzTeNNXus3FuOKGmd5nu7fe17aIxDF0YBRG6byPmBd5dPleyNjGwD2n1enoTsR8s13iG94O",
	"maqUjjRxu7ztLVBYHpX4mXW0+KIuSVDEDtrifu9x658lKC4MU58kaibyyVbmHNipi7cvW5/fEr4zm12E",
	"2cMmMY2jjTAGpGl1/HC3MXX+YCLchopn4ADGZ04xoWUO4XXJP6XnTvry9a39+23rwwt1hOQXdmdPuZPT",
	"u1/s+xY7NbFm+Q61lfkNCXIg+MaNs8KMRjF/of6Y91NTy2JjF4VcKge2oMruFk2pSFlYHnz01od3v7z5",
	"/cWrl0+sWtWghEbwOb+5vLq8tvchUOmcT6ARSacgebh2HS72diiQmLWroXYjNKSqJQYPICpIK2SdZeuE",
	"xczN2S9yPue3SMOc2MSaRknjcX16deXhlYTSmYamqYSf1ZMPxo/yHscp6gxNObz6kXSesnorM+PPrq7H",
	"Ib9UxKClEiVZZzC3kj94ZwftUuLnBjPCnKHW9hrNstbydrN9EdwFZhq+sKsD3JNdazoIP1SV7wX+isxZ",
	"umJKM1OCxpx9ElS6xpO1WqMkVqmiwDz0/lFSuh5pqaChRnLz9t3oIkFXcixT6l7Y1iPsaomQO63+9uHb",
	"3V2ShvfG4m9MehdKJNeVMLRtoYdh24fqZDZcetGbseivSqciz1FeHmTMC0moJVSeL53czQGrocgue3zq",
	"oj7CpsTPKsna/X0v8s0kvywEF6a7co4yS08w66fVbZi9jxFM5OHCDKO6CD9V7PgV/Of7VwLpFo8xbvav",
	"5PLe+DLF55CfdMUuAkIXj5vQ7meBZN3Nrf8snd/6/RPZ7EyGx0yc1WH6/o/UQ1J7Tnf4PHJKr91fy+Zk",
	"MFRHma2RtMAHdCQLyFlQGMjc91DWH5XjhH7dkzmH1HEyhyi+AzaP8Itw+tw0PQ5Gt1QmGVRVCtn9QQYH",
	"Aba0g7LIs/0ArUiMso249XbeXT9vqfw5GJmgrlNP6h5l4NLHFvVqn0r5cSLNoiqFFAQVMwSEBzSHvbM5",
	"2jfXf4DMulrw/0JC+n9XCpFf8yZLZOOIFDGZQs5sDaOhr3vx2Exx/2Q1qB9Cilpd8TlP7Gv2rwAAAP//",
	"5BSlUBYbAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
