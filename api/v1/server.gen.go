// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (POST /api/gphotos/v1/albums)
	CreateAlbum(c *gin.Context)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId GroupID)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId UserID)

	// (DELETE /api/gphotos/v1/albums/{album_id})
	DeleteAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id})
	GetAlbumByID(c *gin.Context, albumId AlbumId)

	// (PATCH /api/gphotos/v1/albums/{album_id})
	UpdateAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (POST /api/gphotos/v1/albums/{album_id}/permissions)
	SetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/photos)
	GetAlbumPhotos(c *gin.Context, albumId AlbumId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := c.Query("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter filter: %s", err)})
		return
	}

	// ------------- Optional query parameter "personal" -------------
	if paramValue := c.Query("personal"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "personal", c.Request.URL.Query(), &params.Personal)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter personal: %s", err)})
		return
	}

	// ------------- Optional query parameter "shared" -------------
	if paramValue := c.Query("shared"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shared", c.Request.URL.Query(), &params.Shared)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter shared: %s", err)})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateAlbum(c)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId GroupID

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAlbum(c, albumId)
}

// GetAlbumByID operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumByID(c, albumId)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateAlbum(c, albumId)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId)
}

// SetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) SetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetAlbumPermissions(c, albumId)
}

// GetAlbumPhotos operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPhotos(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPhotos(c, albumId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums", wrapper.CreateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.DeleteAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.GetAlbumByID)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.UpdateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.SetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.GetAlbumPhotos)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
