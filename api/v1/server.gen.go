// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (POST /api/gphotos/v1/albums)
	CreateAlbum(c *gin.Context)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId GroupID, params GetAlbumsByGroupParams)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId UserID, params GetAlbumsByUserParams)

	// (DELETE /api/gphotos/v1/albums/{album_id})
	DeleteAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id})
	GetAlbumByID(c *gin.Context, albumId AlbumId)

	// (PATCH /api/gphotos/v1/albums/{album_id})
	UpdateAlbum(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/albums/{album_id}/permissions)
	RemoveAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (POST /api/gphotos/v1/albums/{album_id}/permissions)
	SetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/photos)
	GetAlbumPhotos(c *gin.Context, albumId AlbumId, params GetAlbumPhotosParams)

	// (DELETE /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	RemoveTagFromAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (POST /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	SetTagToAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (GET /api/gphotos/v1/albums/{album_id}/thumbnail)
	GetAlbumThumbnail(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/photo/{photo_id})
	DeletePhoto(c *gin.Context, photoId PhotoId)

	// (GET /api/gphotos/v1/photo/{photo_id})
	GetPhoto(c *gin.Context, photoId PhotoId)

	// (GET /api/gphotos/v1/tags)
	GetTags(c *gin.Context, params GetTagsParams)

	// (POST /api/gphotos/v1/tags)
	CreateTag(c *gin.Context)

	// (DELETE /api/gphotos/v1/tags/{tag_id})
	DeleteTag(c *gin.Context, tagId TagId)

	// (PATCH /api/gphotos/v1/tags/{tag_id})
	UpdateTag(c *gin.Context, tagId TagId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	// ------------- Optional query parameter "personal" -------------
	if paramValue := c.Query("personal"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "personal", c.Request.URL.Query(), &params.Personal)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter personal: %s", err)})
		return
	}

	// ------------- Optional query parameter "shared" -------------
	if paramValue := c.Query("shared"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shared", c.Request.URL.Query(), &params.Shared)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter shared: %s", err)})
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := c.Query("search"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter search: %s", err)})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateAlbum(c)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId GroupID

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByGroupParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId, params)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByUserParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId, params)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAlbum(c, albumId)
}

// GetAlbumByID operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumByID(c, albumId)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateAlbum(c, albumId)
}

// RemoveAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) RemoveAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveAlbumPermissions(c, albumId)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId)
}

// SetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) SetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetAlbumPermissions(c, albumId)
}

// GetAlbumPhotos operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPhotos(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumPhotosParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPhotos(c, albumId, params)
}

// RemoveTagFromAlbum operation middleware
func (siw *ServerInterfaceWrapper) RemoveTagFromAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveTagFromAlbum(c, albumId, tagId)
}

// SetTagToAlbum operation middleware
func (siw *ServerInterfaceWrapper) SetTagToAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetTagToAlbum(c, albumId, tagId)
}

// GetAlbumThumbnail operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumThumbnail(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumThumbnail(c, albumId)
}

// DeletePhoto operation middleware
func (siw *ServerInterfaceWrapper) DeletePhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "photo_id" -------------
	var photoId PhotoId

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter photo_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeletePhoto(c, photoId)
}

// GetPhoto operation middleware
func (siw *ServerInterfaceWrapper) GetPhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "photo_id" -------------
	var photoId PhotoId

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter photo_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPhoto(c, photoId)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTags(c, params)
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateTag(c)
}

// DeleteTag operation middleware
func (siw *ServerInterfaceWrapper) DeleteTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteTag(c, tagId)
}

// UpdateTag operation middleware
func (siw *ServerInterfaceWrapper) UpdateTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateTag(c, tagId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums", wrapper.CreateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.DeleteAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.GetAlbumByID)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.UpdateAlbum)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.RemoveAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.SetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.GetAlbumPhotos)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.RemoveTagFromAlbum)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.SetTagToAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/thumbnail", wrapper.GetAlbumThumbnail)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/photo/:photo_id", wrapper.DeletePhoto)

	router.GET(options.BaseURL+"/api/gphotos/v1/photo/:photo_id", wrapper.GetPhoto)

	router.GET(options.BaseURL+"/api/gphotos/v1/tags", wrapper.GetTags)

	router.POST(options.BaseURL+"/api/gphotos/v1/tags", wrapper.CreateTag)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.DeleteTag)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.UpdateTag)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///RhafxK1gAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
