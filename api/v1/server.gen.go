// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (POST /api/gphotos/v1/albums)
	CreateAlbum(c *gin.Context)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId GroupID)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId UserID)

	// (DELETE /api/gphotos/v1/albums/{album_id})
	DeleteAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id})
	GetAlbumByID(c *gin.Context, albumId AlbumId)

	// (PATCH /api/gphotos/v1/albums/{album_id})
	UpdateAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (POST /api/gphotos/v1/albums/{album_id}/permissions)
	SetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/photos)
	GetAlbumPhotos(c *gin.Context, albumId AlbumId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := c.Query("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter filter: %s", err)})
		return
	}

	// ------------- Optional query parameter "personal" -------------
	if paramValue := c.Query("personal"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "personal", c.Request.URL.Query(), &params.Personal)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter personal: %s", err)})
		return
	}

	// ------------- Optional query parameter "shared" -------------
	if paramValue := c.Query("shared"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shared", c.Request.URL.Query(), &params.Shared)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter shared: %s", err)})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateAlbum(c)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId GroupID

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAlbum(c, albumId)
}

// GetAlbumByID operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumByID(c, albumId)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateAlbum(c, albumId)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId)
}

// SetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) SetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetAlbumPermissions(c, albumId)
}

// GetAlbumPhotos operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPhotos(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPhotos(c, albumId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums", wrapper.CreateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.DeleteAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.GetAlbumByID)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.UpdateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.SetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.GetAlbumPhotos)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
