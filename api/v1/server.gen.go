// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (POST /api/gphotos/v1/albums)
	CreateAlbum(c *gin.Context)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId GroupID, params GetAlbumsByGroupParams)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId UserID, params GetAlbumsByUserParams)

	// (DELETE /api/gphotos/v1/albums/{album_id})
	DeleteAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id})
	GetAlbumByID(c *gin.Context, albumId AlbumId)

	// (PATCH /api/gphotos/v1/albums/{album_id})
	UpdateAlbum(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/albums/{album_id}/permissions)
	RemoveAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (POST /api/gphotos/v1/albums/{album_id}/permissions)
	SetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/photos)
	GetAlbumPhotos(c *gin.Context, albumId AlbumId, params GetAlbumPhotosParams)

	// (DELETE /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	RemoveTagFromAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (POST /api/gphotos/v1/albums/{album_id}/tags/{tag_id})
	SetTagToAlbum(c *gin.Context, albumId AlbumId, tagId TagId)

	// (GET /api/gphotos/v1/albums/{album_id}/thumbnail)
	GetAlbumThumbnail(c *gin.Context, albumId AlbumId)

	// (DELETE /api/gphotos/v1/photo/{photo_id})
	DeletePhoto(c *gin.Context, photoId PhotoId)

	// (GET /api/gphotos/v1/photo/{photo_id})
	GetPhoto(c *gin.Context, photoId PhotoId)

	// (GET /api/gphotos/v1/tags)
	GetTags(c *gin.Context, params GetTagsParams)

	// (POST /api/gphotos/v1/tags)
	CreateTag(c *gin.Context)

	// (DELETE /api/gphotos/v1/tags/{tag_id})
	DeleteTag(c *gin.Context, tagId TagId)

	// (PATCH /api/gphotos/v1/tags/{tag_id})
	UpdateTag(c *gin.Context, tagId TagId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	// ------------- Optional query parameter "personal" -------------
	if paramValue := c.Query("personal"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "personal", c.Request.URL.Query(), &params.Personal)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter personal: %s", err)})
		return
	}

	// ------------- Optional query parameter "shared" -------------
	if paramValue := c.Query("shared"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shared", c.Request.URL.Query(), &params.Shared)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter shared: %s", err)})
		return
	}

	// ------------- Optional query parameter "search" -------------
	if paramValue := c.Query("search"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "search", c.Request.URL.Query(), &params.Search)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter search: %s", err)})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateAlbum(c)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId GroupID

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByGroupParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId, params)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsByUserParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId, params)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAlbum(c, albumId)
}

// GetAlbumByID operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumByID(c, albumId)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateAlbum(c, albumId)
}

// RemoveAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) RemoveAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveAlbumPermissions(c, albumId)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId)
}

// SetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) SetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetAlbumPermissions(c, albumId)
}

// GetAlbumPhotos operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPhotos(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumPhotosParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPhotos(c, albumId, params)
}

// RemoveTagFromAlbum operation middleware
func (siw *ServerInterfaceWrapper) RemoveTagFromAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RemoveTagFromAlbum(c, albumId, tagId)
}

// SetTagToAlbum operation middleware
func (siw *ServerInterfaceWrapper) SetTagToAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetTagToAlbum(c, albumId, tagId)
}

// GetAlbumThumbnail operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumThumbnail(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumThumbnail(c, albumId)
}

// DeletePhoto operation middleware
func (siw *ServerInterfaceWrapper) DeletePhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "photo_id" -------------
	var photoId PhotoId

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter photo_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeletePhoto(c, photoId)
}

// GetPhoto operation middleware
func (siw *ServerInterfaceWrapper) GetPhoto(c *gin.Context) {

	var err error

	// ------------- Path parameter "photo_id" -------------
	var photoId PhotoId

	err = runtime.BindStyledParameter("simple", false, "photo_id", c.Param("photo_id"), &photoId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter photo_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPhoto(c, photoId)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTags(c, params)
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateTag(c)
}

// DeleteTag operation middleware
func (siw *ServerInterfaceWrapper) DeleteTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteTag(c, tagId)
}

// UpdateTag operation middleware
func (siw *ServerInterfaceWrapper) UpdateTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tag_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateTag(c, tagId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums", wrapper.CreateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.DeleteAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.GetAlbumByID)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.UpdateAlbum)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.RemoveAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.SetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.GetAlbumPhotos)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.RemoveTagFromAlbum)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums/:album_id/tags/:tag_id", wrapper.SetTagToAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/thumbnail", wrapper.GetAlbumThumbnail)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/photo/:photo_id", wrapper.DeletePhoto)

	router.GET(options.BaseURL+"/api/gphotos/v1/photo/:photo_id", wrapper.GetPhoto)

	router.GET(options.BaseURL+"/api/gphotos/v1/tags", wrapper.GetTags)

	router.POST(options.BaseURL+"/api/gphotos/v1/tags", wrapper.CreateTag)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.DeleteTag)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/tags/:tag_id", wrapper.UpdateTag)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
