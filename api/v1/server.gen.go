// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/gphotos/v1)
	GetVersionMetadata(c *gin.Context)

	// (GET /api/gphotos/v1/albums)
	GetAlbums(c *gin.Context, params GetAlbumsParams)

	// (POST /api/gphotos/v1/albums)
	CreateAlbum(c *gin.Context)

	// (GET /api/gphotos/v1/albums/groups/{group_id})
	GetAlbumsByGroup(c *gin.Context, groupId GroupID)

	// (GET /api/gphotos/v1/albums/users/{user_id})
	GetAlbumsByUser(c *gin.Context, userId UserID)

	// (DELETE /api/gphotos/v1/albums/{album_id})
	DeleteAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id})
	GetAlbumByID(c *gin.Context, albumId AlbumId)

	// (PATCH /api/gphotos/v1/albums/{album_id})
	UpdateAlbum(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/permissions)
	GetAlbumPermissions(c *gin.Context, albumId AlbumId)

	// (GET /api/gphotos/v1/albums/{album_id}/photos)
	GetAlbumPhotos(c *gin.Context, albumId AlbumId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetVersionMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetVersionMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVersionMetadata(c)
}

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumsParams

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := c.Query("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter filter: %s", err)})
		return
	}

	// ------------- Optional query parameter "personal" -------------
	if paramValue := c.Query("personal"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "personal", c.Request.URL.Query(), &params.Personal)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter personal: %s", err)})
		return
	}

	// ------------- Optional query parameter "shared" -------------
	if paramValue := c.Query("shared"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shared", c.Request.URL.Query(), &params.Shared)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter shared: %s", err)})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := c.Query("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter page: %s", err)})
		return
	}

	// ------------- Optional query parameter "size" -------------
	if paramValue := c.Query("size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter size: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbums(c, params)
}

// CreateAlbum operation middleware
func (siw *ServerInterfaceWrapper) CreateAlbum(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateAlbum(c)
}

// GetAlbumsByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "group_id" -------------
	var groupId GroupID

	err = runtime.BindStyledParameter("simple", false, "group_id", c.Param("group_id"), &groupId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter group_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByGroup(c, groupId)
}

// GetAlbumsByUser operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumsByUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserID

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumsByUser(c, userId)
}

// DeleteAlbum operation middleware
func (siw *ServerInterfaceWrapper) DeleteAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteAlbum(c, albumId)
}

// GetAlbumByID operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumByID(c, albumId)
}

// UpdateAlbum operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlbum(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateAlbum(c, albumId)
}

// GetAlbumPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPermissions(c, albumId)
}

// GetAlbumPhotos operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumPhotos(c *gin.Context) {

	var err error

	// ------------- Path parameter "album_id" -------------
	var albumId AlbumId

	err = runtime.BindStyledParameter("simple", false, "album_id", c.Param("album_id"), &albumId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter album_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAlbumPhotos(c, albumId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/gphotos/v1", wrapper.GetVersionMetadata)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums", wrapper.GetAlbums)

	router.POST(options.BaseURL+"/api/gphotos/v1/albums", wrapper.CreateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/groups/:group_id", wrapper.GetAlbumsByGroup)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/users/:user_id", wrapper.GetAlbumsByUser)

	router.DELETE(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.DeleteAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.GetAlbumByID)

	router.PATCH(options.BaseURL+"/api/gphotos/v1/albums/:album_id", wrapper.UpdateAlbum)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/permissions", wrapper.GetAlbumPermissions)

	router.GET(options.BaseURL+"/api/gphotos/v1/albums/:album_id/photos", wrapper.GetAlbumPhotos)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX2/bOBL/KgR7QF90UdL07sFv7eW2CLBtg+62L0FQ0NLYYiuRKjlK6zX03RckRVt/",
	"KMnOJrtp0bfEHM4MZ34zvyG1pYksSilAoKaLLS2ZYgUgKPsfy5dV8ZGn5u8UdKJ4iVwKuqC/Z0AuL4hc",
	"EcyAWDkaUW6WSoYZjahgBdDFXkVEFXypuIKULlBVEFGdZFAwoxs3pZHVqLhY07qO6FrJqry8mDNsxcKG",
	"7dLxhku2hqFV8ysRVbEE5a19qUBt9ubsvrbqlVQFQ7qgXOD5Mxp5W1wgrEFZY5r/ETCGElneWDMH5QiF",
	"JiUo0hgJ2beqjrVfaVDzQTZS4RiblWNDXPtFi7AXFjkWavnbFV1cb+m/FKzogj6J98iMmx3x2+UnSPAd",
	"rECBSIDW0ZaWSpagkINVuKySz4ChDGLmD+RkyNcMFJACUs4I10SjNAeI+h5HNFHAENKPLKDXrnEpSMoQ",
	"CBekEvwbQV6ARlYYbO4SYST+bVZCNjpa+0Za//VLbqAolwkLa/Ersypcdvvbza+zW+VXAcrsPS6LtARV",
	"cK25FK4NdXKaWV3bobXPXKThMm5+kdaSNZBJlA+kG9n6oTRnVbEUjOfDdFQq99nYSc2kp27X6bUvlQ6+",
	"m+TfDHy5qSNXrL9yjYcXrJUeVqltaZ0/ppS4JrGPD1OKbUIB2zl5NQUn5nvOkRi1jHK416+MeNuRwQFc",
	"Az5c43sNalJhCEI2Hu/gSwUar9gmlywdhqTb4drU8d/nAeoYtKsBxh379qp6sleNdqHBgmWdadU9pI9g",
	"OqKDHA0i4yaMv9zQdvkdnGaQwbbjfr5pawudwxdl1/eRRrMfcoZ59RPJcMVOJaGlnsvWaLSbh9xY4jZH",
	"TRhCJ+iH8PB2ytMju2zbW6vV6mh2hHy7Mtxxn0PKXTvQ2HDTGWgMAVi2mx5qVjyHeaI3UqHdE8RkJy2U",
	"YWayjgWZqR/1bSdPntF2Xkd7+tr7cmMZwKbrH6ApB5MDaarfywd4v2MDce3xaGz1yqJtvNEYKowPoIzM",
	"a0CWMmT3WSKJzHNIcHD8O+oPeT+fJvMjFytb+8gxt/fKZpKM6K07vfHhw//f/Xb59s0TOwKXIFjJ6YKe",
	"n5yenNleiJl1PmYljxsF8e2Z5ZdQPa8BibFraNgM7GwpKyTslvGcLXMgjWXjhImZFbpM6YK+AuznxCRW",
	"l1JoF9dnp6cuvAJBuAopy5w7Ho4/aUfG++vbVJT7pmy8uidpPCXFTiaiz0/Phkd+I5GwCjMQaJyB1Ej+",
	"xznbG3wFfCshQUgJKCUVkUlSGdzWu1H82iNT0xvzay/use0mejL8LM/dGK2JudOkZLkhUhGdMQUp+cpN",
	"j8uAJJVSIJDkcr2G1F+VB0l54QxGnfeV675dLRWSQqajd3ypkE4+X/Q1rniOoAh8KxXYch7R7OSO1A2Y",
	"ZKQEpaVgPlhjryONVMjCUsocmAiZUICVEj7okxaczKz+EJz3OYnt1HKAnB1rTFN5sNra37UCVZVzjYZR",
	"ZwDaBuXBdXfiRM+Hor9IteRpCuJktDYvBYIyaLCV2cidj1j17eykU7lNqRiOLKUee3EBwsTumtstt//Z",
	"9RfNmnI3n5cy3dxvbnpXqkCWrHsk3ITP7teZcfPNza6V/73VwZZJMEzsCyJjQn4cJnPOtTFTd6IqqjwP",
	"oGi0+8fuOh9v/UNxPcsHppCeage7aSZQM0zwcvPK3+y6hDDTd/yz+CNpPT4Iyw156sP49EfoPeOosS82",
	"8bZ5+f57MfPerR8HmeaN/zEhxgGmCeEPjpet/wBWO805oL1yd5N8YX/3nHVcgndf2B4+xSa9jzw5deTr",
	"MVxGLzeXFz9D/ACzGsMkG4b9fZmyewL2Y5jj6p/pv2v7i3sPWkHWVICKw617xPTEYTiBMJG6r/2k+zYV",
	"rvKrjsyjLfbOx5wh8I6NxncDnPa5D0XP7vvt4cBxe/ofRUcQ41/1HiNY9i/ah6IkdPTvBh6vIeWMuudX",
	"DerW56JSOV3QmNY39Z8BAAD//1wrTui4JAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
