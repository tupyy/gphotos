// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"time"
)

// Album defines model for Album.
type Album struct {
	// path of the bucket where media is stored
	Bucket string `json:"bucket"`

	// creation date in unix timestamp
	CreatedAt time.Time `json:"created_at"`

	// description of the album
	Description *string `json:"description,omitempty"`
	Href        string  `json:"href"`
	Id          string  `json:"id"`
	Kind        string  `json:"kind"`

	// location of the album
	Location *string `json:"location,omitempty"`

	// name of the album
	Name        string          `json:"name"`
	Owner       ObjectReference `json:"owner"`
	Permissions ObjectReference `json:"permissions"`
	Photos      ObjectReference `json:"photos"`
	Tags        *[]Tag          `json:"tags,omitempty"`

	// url of the thumbnail of the album
	Thumbnail *string `json:"thumbnail,omitempty"`
}

// AlbumList defines model for AlbumList.
type AlbumList struct {
	Items []Album `json:"items"`
	Kind  string  `json:"kind"`
	Page  int     `json:"page"`
	Size  int     `json:"size"`
	Total int     `json:"total"`
}

// AlbumPermissions defines model for AlbumPermissions.
type AlbumPermissions struct {
	Album  *ObjectReference `json:"album,omitempty"`
	Groups *[]Permissions   `json:"groups,omitempty"`
	Href   string           `json:"href"`
	Id     string           `json:"id"`
	Kind   string           `json:"kind"`
	Users  *[]Permissions   `json:"users,omitempty"`
}

// AlbumPermissionsRequest defines model for AlbumPermissionsRequest.
type AlbumPermissionsRequest = []struct {
	Owner struct {
		// id of the owner
		Id string `json:"id"`

		// user or group
		Kind string `json:"kind"`
	} `json:"owner"`
	Permissions []string `json:"permissions"`
}

// AlbumRequestPayload defines model for AlbumRequestPayload.
type AlbumRequestPayload struct {
	CreatedAt        *int64  `json:"created_at,omitempty"`
	Description      *string `json:"description,omitempty"`
	GroupPermissions *string `json:"group_permissions,omitempty"`
	Location         *string `json:"location,omitempty"`
	Name             string  `json:"name"`

	// name of the thumbnail
	Thumbnail       *string `json:"thumbnail,omitempty"`
	UserPermissions *string `json:"user_permissions,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code   *string `json:"code,omitempty"`
	Href   string  `json:"href"`
	Id     string  `json:"id"`
	Kind   string  `json:"kind"`
	Reason *string `json:"reason,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// Permissions defines model for Permissions.
type Permissions struct {
	Owner       ObjectReference `json:"owner"`
	Permissions []string        `json:"permissions"`
}

// Photo defines model for Photo.
type Photo struct {
	Album ObjectReference `json:"album"`
	Href  string          `json:"href"`
	Id    string          `json:"id"`
	Kind  string          `json:"kind"`

	// path to the thumbnail of the photo
	Thumbnail string `json:"thumbnail"`
}

// PhotoList defines model for PhotoList.
type PhotoList struct {
	Items []Photo `json:"items"`
	Kind  string  `json:"kind"`
	Page  int     `json:"page"`
	Size  int     `json:"size"`
	Total int     `json:"total"`
}

// Tag defines model for Tag.
type Tag struct {
	Albums []ObjectReference `json:"albums"`

	// color of the tag in hex format
	Color *string `json:"color,omitempty"`
	Href  string  `json:"href"`
	Id    string  `json:"id"`
	Kind  string  `json:"kind"`

	// name of the tag
	Name string          `json:"name"`
	User ObjectReference `json:"user"`
}

// TagList defines model for TagList.
type TagList struct {
	Items []Tag  `json:"items"`
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// TagRequestPayload defines model for TagRequestPayload.
type TagRequestPayload struct {
	// hex rerepresentation of the color
	Color *string `json:"color,omitempty"`

	// name of the tag
	Name string `json:"name"`
}

// VersionMetadata defines model for VersionMetadata.
type VersionMetadata struct {
	Collections *[]struct {
		Href string `json:"href"`
		Id   string `json:"id"`
		Kind string `json:"kind"`
	} `json:"collections,omitempty"`
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// AlbumId defines model for album_id.
type AlbumId = string

// GroupID defines model for groupID.
type GroupID = string

// Page defines model for page.
type Page = int32

// PhotoId defines model for photo_id.
type PhotoId = string

// Search defines model for search.
type Search = string

// Size defines model for size.
type Size = int32

// TagId defines model for tag_id.
type TagId = string

// UserID defines model for userID.
type UserID = string

// GetAlbumsParams defines parameters for GetAlbums.
type GetAlbumsParams struct {
	// sort mode
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// fetch personal albums
	Personal *bool `form:"personal,omitempty" json:"personal,omitempty"`

	// return shared albums
	Shared *bool `form:"shared,omitempty" json:"shared,omitempty"`

	// search expression
	Search *Search `form:"search,omitempty" json:"search,omitempty"`

	// page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// total number of items per page
	Size *Size `form:"size,omitempty" json:"size,omitempty"`
}

// CreateAlbumJSONBody defines parameters for CreateAlbum.
type CreateAlbumJSONBody = AlbumRequestPayload

// GetAlbumsByGroupParams defines parameters for GetAlbumsByGroup.
type GetAlbumsByGroupParams struct {
	// page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// total number of items per page
	Size *Size `form:"size,omitempty" json:"size,omitempty"`
}

// GetAlbumsByUserParams defines parameters for GetAlbumsByUser.
type GetAlbumsByUserParams struct {
	// page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// total number of items per page
	Size *Size `form:"size,omitempty" json:"size,omitempty"`
}

// UpdateAlbumJSONBody defines parameters for UpdateAlbum.
type UpdateAlbumJSONBody = AlbumRequestPayload

// SetAlbumPermissionsJSONBody defines parameters for SetAlbumPermissions.
type SetAlbumPermissionsJSONBody = AlbumPermissionsRequest

// GetAlbumPhotosParams defines parameters for GetAlbumPhotos.
type GetAlbumPhotosParams struct {
	// page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// total number of items per page
	Size *Size `form:"size,omitempty" json:"size,omitempty"`
}

// GetTagsParams defines parameters for GetTags.
type GetTagsParams struct {
	// page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// total number of items per page
	Size *Size `form:"size,omitempty" json:"size,omitempty"`
}

// CreateTagJSONBody defines parameters for CreateTag.
type CreateTagJSONBody = TagRequestPayload

// UpdateTagJSONBody defines parameters for UpdateTag.
type UpdateTagJSONBody = TagRequestPayload

// CreateAlbumJSONRequestBody defines body for CreateAlbum for application/json ContentType.
type CreateAlbumJSONRequestBody = CreateAlbumJSONBody

// UpdateAlbumJSONRequestBody defines body for UpdateAlbum for application/json ContentType.
type UpdateAlbumJSONRequestBody = UpdateAlbumJSONBody

// SetAlbumPermissionsJSONRequestBody defines body for SetAlbumPermissions for application/json ContentType.
type SetAlbumPermissionsJSONRequestBody = SetAlbumPermissionsJSONBody

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody = CreateTagJSONBody

// UpdateTagJSONRequestBody defines body for UpdateTag for application/json ContentType.
type UpdateTagJSONRequestBody = UpdateTagJSONBody
