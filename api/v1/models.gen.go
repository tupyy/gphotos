// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

// Album defines model for Album.
type Album struct {
	// path of the bucket where media is stored
	Bucket string `json:"bucket"`

	// creation date in unix timestamp
	CreatedAt int64 `json:"created_at"`

	// description of the album
	Description *string `json:"description,omitempty"`
	Href        string  `json:"href"`
	Id          string  `json:"id"`
	Kind        string  `json:"kind"`

	// location of the album
	Location *string `json:"location,omitempty"`

	// name of the album
	Name        string           `json:"name"`
	Owner       *ObjectReference `json:"owner,omitempty"`
	Permissions *struct {
		Href *string `json:"href,omitempty"`
		Kind *string `json:"kind,omitempty"`
	} `json:"permissions,omitempty"`
	Photos *struct {
		Href *string `json:"href,omitempty"`
		Kind *string `json:"kind,omitempty"`
	} `json:"photos,omitempty"`
	Tags *struct {
		Href *string `json:"href,omitempty"`
		Kind *string `json:"kind,omitempty"`
	} `json:"tags,omitempty"`

	// url of the thumbnail of the album
	Thumbnail *string `json:"thumbnail,omitempty"`
}

// AlbumPermissions defines model for AlbumPermissions.
type AlbumPermissions struct {
	Album  *ObjectReference    `json:"album,omitempty"`
	Groups *[]GroupPermissions `json:"groups,omitempty"`
	Users  *[]UserPermissions  `json:"users,omitempty"`
}

// Albums defines model for Albums.
type Albums struct {
	Albums *[]Album `json:"albums,omitempty"`

	// number of the page
	Page *int32 `json:"page,omitempty"`

	// number of album in a page
	Size  *int32 `json:"size,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// GroupPermissions defines model for GroupPermissions.
type GroupPermissions struct {
	Group       ObjectReference `json:"group"`
	Permissions []string        `json:"permissions"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// Photo defines model for Photo.
type Photo struct {
	// bucket where the photo is stored
	Bucket *string `json:"bucket,omitempty"`

	// name of the file
	Filename *string `json:"filename,omitempty"`
	Href     string  `json:"href"`
	Id       string  `json:"id"`
	Kind     string  `json:"kind"`

	// path to the thumbnail of the photo
	Thumbnail *string `json:"thumbnail,omitempty"`
}

// Photos defines model for Photos.
type Photos struct {
	Album *ObjectReference `json:"album,omitempty"`
	Items *[]Photo         `json:"items,omitempty"`
}

// UserPermissions defines model for UserPermissions.
type UserPermissions struct {
	Permissions []string        `json:"permissions"`
	User        ObjectReference `json:"user"`
}

// VersionMetadata defines model for VersionMetadata.
type VersionMetadata struct {
	Collections *[]struct {
		Href string `json:"href"`
		Id   string `json:"id"`
		Kind string `json:"kind"`
	} `json:"collections,omitempty"`
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// GetAlbumsParams defines parameters for GetAlbums.
type GetAlbumsParams struct {
	// sort mode
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// page offset
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// total number of albums to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// filter expression
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// fetch personal albums
	Personal *bool `form:"personal,omitempty" json:"personal,omitempty"`

	// return shared albums
	Shared *bool `form:"shared,omitempty" json:"shared,omitempty"`
}
