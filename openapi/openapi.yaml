openapi: 3.0.1
info:
  title: gphotos
  version: '#VERSION#'
servers:
- url: /
paths:
  /api/gphotos/v1:
    get:
      tags:
      - Versions
      description: get information about available versions
      operationId: getVersionMetadata
      responses:
        200:
          description: version metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionMetadata'
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: unexpected error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/gphotos/v1/albums:
    get:
      tags:
      - Albums
      description: get all albums owned by or shared with the current logged user
      operationId: getAlbums
      parameters:
      - name: sort
        in: query
        description: sort mode
        schema:
          type: string
      - name: filter
        in: query
        description: filter expression
        schema:
          type: string
      - name: personal
        in: query
        description: fetch personal albums
        schema:
          type: boolean
      - name: shared
        in: query
        description: return shared albums
        schema:
          type: boolean
      - $ref: "#/components/parameters/page"
      - $ref: "#/components/parameters/size"
      responses:
        200:
          description: list of albums owned by or shared with logged user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumList'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: create an album
      operationId: createAlbum
      requestBody:
        description: album data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumRequestPayload'
      responses:
        201:
          description: album created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Albums
  /api/gphotos/v1/albums/{album_id}:
    get:
      operationId: GetAlbumByID
      tags:
        - Albums
      parameters:
        - $ref: "#/components/parameters/album_id"
      responses:
        200:
          description: fetch album by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No album found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      operationId: UpdateAlbum
      tags:
        - Albums
      parameters:
        - $ref: "#/components/parameters/album_id"
      requestBody:
        description: album data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumRequestPayload'
      responses:
        200:
          description: path the album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        401:
          description: Not authenticated.
          content: {}
        403:
          description: Forbidden.
          content: {}
        500:
          description: Internal error.
          content: {}
        503:
          description: Not available.
          content: {}
    delete:
      operationId: DeleteAlbum
      tags:
        - Albums
      parameters:
        - $ref: "#/components/parameters/album_id"
      responses:
        200:
          description: delete album by specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No album found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/gphotos/v1/albums/users/{user_id}:
    get:
      tags:
      - Albums
      description: get all user's album shared with the current logger user
      operationId: getAlbumsByUser
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        200:
          description: list of album shard by 'user_id' with logged user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumList'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No user found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/gphotos/v1/albums/groups/{group_id}:
    get:
      tags:
      - Albums
      description: get all user's album shared with the current logger user
      operationId: getAlbumsByGroup
      parameters:
        - $ref: "#/components/parameters/groupID"
      responses:
        200:
          description: list of album shared by 'group_id' with logged user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumList'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No group found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/gphotos/v1/albums/{album_id}/permissions:
    get:
      tags:
      - Permissions
      description: retrieve the list of user and group permissions
      operationId: getAlbumPermissions
      parameters:
        - $ref: "#/components/parameters/album_id"
      responses:
        200:
          description: retrieve the list of user and group permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumPermissions'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No album found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - Permissions
      description: set permission on an album
      operationId: setAlbumPermissions
      parameters:
        - $ref: "#/components/parameters/album_id"
      requestBody:
        description: permissions to be applied on the album
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumPermissionsRequest'
      responses:
        200:
          description: retrieve the list of user and group permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumPermissions'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No album found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Permissions
      description: delete the permission of an album
      operationId: remvoveAlbumPermissions
      parameters:
        - $ref: "#/components/parameters/album_id"
      responses:
        204:
          description: remove all album's permissions
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No album found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/gphotos/v1/albums/{album_id}/photos:
    get:
      tags:
      - Media
      description: retrieve the list of photos of the album 
      operationId: getAlbumPhotos
      parameters:
        - $ref: "#/components/parameters/album_id"
      responses:
        200:
          description: retrieve the list of photos of the album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoList'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No album found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/gphotos/v1/albums/{album_id}/tags/{tag_id}:
    post:
      tags:
        - Tags
      description: associate a tag with an album
      operationId: setTagToAlbum
      parameters:
        - $ref: "#/components/parameters/album_id"
        - $ref: "#/components/parameters/tag_id"
      responses:
        201:
          description: tag associated with the album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No album or tag found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Tags
      description: untag an album
      operationId: removeTagFromAlbum
      parameters:
        - $ref: "#/components/parameters/album_id"
        - $ref: "#/components/parameters/tag_id"
      responses:
        204:
          description: tag dissociated with the album
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No album or tag found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  /api/gphotos/v1/tags:
    get:
      tags:
      - Tags
      description: get all tags owned the current logged user
      operationId: getTags
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
      responses:
        200:
          description: list of tags owned by logged user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: create an tag
      operationId: createTag
      requestBody:
        description: tag data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequestPayload'
      responses:
        201:
          description: tag created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Tags
  /api/gphotos/v1/tags/{tag_id}:
    patch:
      operationId: UpdateTag 
      tags:
        - Tags
      parameters:
        - $ref: "#/components/parameters/tag_id"
      requestBody:
        description: tag data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequestPayload'
      responses:
        200:
          description: Path tag with specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        401:
          description: Not authenticated.
          content: {}
        403:
          description: Forbidden.
          content: {}
        500:
          description: Internal error.
          content: {}
        503:
          description: Not available.
          content: {}
    delete:
      operationId: DeleteTag
      tags:
        - Tags
      parameters:
        - $ref: "#/components/parameters/tag_id"
      responses:
        200:
          description: delete tag with specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        401:
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No tag found with the specified ID exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ObjectReference:
      required:
      - href
      - id
      - kind
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      required:
        - kind
        - page
        - size
        - total
        - items
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer     
    VersionMetadata:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - type: object
        properties:
          collections:
            type: array
            items:
              type: object
              allOf:
                - $ref: '#/components/schemas/ObjectReference'
    Error:
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            code:
              type: string
            reason:
              type: string
    Album:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - required:
        - bucket
        - created_at
        - name
        - owner
        - permissions
        - photos
        type: object
        properties:
          name:
            type: string
            description: name of the album
          created_at:
            type: string
            description: creation date in unix timestamp
            format: date-time
          description:
            type: string
            description: description of the album
          location:
            type: string
            description: location of the album
          bucket:
            type: string
            description: path of the bucket where media is stored
          thumbnail:
            type: string
            description: url of the thumbnail of the album
          owner:
            $ref: '#/components/schemas/ObjectReference'
          photos:
            $ref: '#/components/schemas/ObjectReference'
          tags:
            $ref: '#/components/schemas/TagList'
          permissions:
            $ref: '#/components/schemas/ObjectReference'
    AlbumList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Album'
    Photo:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - type: object
        properties:
          album:
            $ref: '#/components/schemas/ObjectReference'
          filename:
            type: string
            description: name of the file
          bucket:
            type: string
            description: bucket where the photo is stored
          thumbnail:
            type: string
            description: path to the thumbnail of the photo
      - required:
          - album
          - filename
          - bucket
          - thumbnail
    PhotoList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Photo'
    Tag:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - required:
        - name
        - user
        - albums
        type: object
        properties:
          albums:
            type: array
            items:
              $ref: '#/components/schemas/ObjectReference'
          user:
            $ref: '#/components/schemas/ObjectReference'
          name:
            type: string
            description: name of the tag
          color:
            type: string
            description: color of the tag in hex format
    TagList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
    User:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - type: object
        properties:
          name:
            type: string
            description: name of the user
          surname:
            type: string
            description: surname of the user
          user_id:
            type: string
            description: user_id
          groups:
            type: array
            items:
              $ref: '#/components/schemas/ObjectReference'
    Group:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - type: object
        properties:
          name:
            type: string
            description: name of the group
          members:
            type: array
            items:
              $ref: '#/components/schemas/ObjectReference'
    Permissions:
      required:
      - permissions
      - owner
      type: object
      properties:
        owner:
          $ref: '#/components/schemas/ObjectReference'
        permissions:
          type: array
          items:
            type: string
    AlbumPermissions:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - type: object
        properties:
          album:
            $ref: '#/components/schemas/ObjectReference'
          users:
            type: array
            items:
              $ref: '#/components/schemas/Permissions'
          groups:
            type: array
            items:
              $ref: '#/components/schemas/Permissions'
      required:
        - album
    AlbumPermissionsRequest:
      type: array
      items:
        type: object
        properties:
          owner:
            type: object
            properties:
              kind:
                type: string
                description: user or group
              id:
                type: string
                description: id of the owner
            required:
              - kind
              - id
          permissions:
            type: array
            items:
              type: string
        required:
          - owner
          - permissions
    AlbumRequestPayload:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        created_at:
          type: integer
          format: int64
        location:
          type: string
        user_permissions:
          type: string
        group_permissions:
          type: string
      required:
        - name
    TagRequestPayload:
      type: object
      properties:
        name:
          type: string
          description: name of the tag
        color:
          type: string
          description: hex rerepresentation of the color
      required:
        - name
  # Parameters
  parameters:
    album_id:
      name: album_id
      description: The ID of the album
      schema:
        type: string
      in: path
      required: true
    tag_id:
      name: tag_id
      description: The ID of the tag
      schema:
        type: string
      in: path
      required: true
    userID:
      name: user_id
      description: The ID of the user
      schema:
        type: string
      in: path
      required: true
    groupID:
      name: group_id
      description: The ID of the group
      schema:
        type: string
      in: path
      required: true
    page:
      name: page
      in: query
      description: page number
      schema:
        type: integer
        format: int32
    size:
      name: size
      in: query
      description: total number of items per page
      schema:
        type: integer
        format: int32
