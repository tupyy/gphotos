// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Photo photo
//
// swagger:model Photo
type Photo struct {
	ObjectReference

	// bucket where the photo is stored
	Bucket string `json:"bucket,omitempty"`

	// name of the file
	Filename string `json:"filename,omitempty"`

	// path to the thumbnail of the photo
	Thumbnail string `json:"thumbnail,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Photo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ObjectReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ObjectReference = aO0

	// AO1
	var dataAO1 struct {
		Bucket string `json:"bucket,omitempty"`

		Filename string `json:"filename,omitempty"`

		Thumbnail string `json:"thumbnail,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Bucket = dataAO1.Bucket

	m.Filename = dataAO1.Filename

	m.Thumbnail = dataAO1.Thumbnail

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Photo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ObjectReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Bucket string `json:"bucket,omitempty"`

		Filename string `json:"filename,omitempty"`

		Thumbnail string `json:"thumbnail,omitempty"`
	}

	dataAO1.Bucket = m.Bucket

	dataAO1.Filename = m.Filename

	dataAO1.Thumbnail = m.Thumbnail

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this photo
func (m *Photo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectReference
	if err := m.ObjectReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this photo based on the context it is used
func (m *Photo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectReference
	if err := m.ObjectReference.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Photo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Photo) UnmarshalBinary(b []byte) error {
	var res Photo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
