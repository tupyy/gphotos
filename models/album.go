// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Album album
//
// swagger:model Album
type Album struct {
	ObjectReference

	// path of the bucket where media is stored
	// Required: true
	Bucket *string `json:"bucket"`

	// creation date in unix timestamp
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// description of the album
	Description string `json:"description,omitempty"`

	// group permissions
	GroupPermissions *GroupPermissions `json:"group_permissions,omitempty"`

	// location of the album
	Location string `json:"location,omitempty"`

	// name of the album
	// Required: true
	Name *string `json:"name"`

	// tags
	Tags []*Tag `json:"tags"`

	// url of the thumbnail of the album
	Thumbnail string `json:"thumbnail,omitempty"`

	// user permissions
	UserPermissions *UserPermissions `json:"user_permissions,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Album) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ObjectReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ObjectReference = aO0

	// AO1
	var dataAO1 struct {
		Bucket *string `json:"bucket"`

		CreatedAt *int64 `json:"created_at"`

		Description string `json:"description,omitempty"`

		GroupPermissions *GroupPermissions `json:"group_permissions,omitempty"`

		Location string `json:"location,omitempty"`

		Name *string `json:"name"`

		Tags []*Tag `json:"tags"`

		Thumbnail string `json:"thumbnail,omitempty"`

		UserPermissions *UserPermissions `json:"user_permissions,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Bucket = dataAO1.Bucket

	m.CreatedAt = dataAO1.CreatedAt

	m.Description = dataAO1.Description

	m.GroupPermissions = dataAO1.GroupPermissions

	m.Location = dataAO1.Location

	m.Name = dataAO1.Name

	m.Tags = dataAO1.Tags

	m.Thumbnail = dataAO1.Thumbnail

	m.UserPermissions = dataAO1.UserPermissions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Album) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ObjectReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Bucket *string `json:"bucket"`

		CreatedAt *int64 `json:"created_at"`

		Description string `json:"description,omitempty"`

		GroupPermissions *GroupPermissions `json:"group_permissions,omitempty"`

		Location string `json:"location,omitempty"`

		Name *string `json:"name"`

		Tags []*Tag `json:"tags"`

		Thumbnail string `json:"thumbnail,omitempty"`

		UserPermissions *UserPermissions `json:"user_permissions,omitempty"`
	}

	dataAO1.Bucket = m.Bucket

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.Description = m.Description

	dataAO1.GroupPermissions = m.GroupPermissions

	dataAO1.Location = m.Location

	dataAO1.Name = m.Name

	dataAO1.Tags = m.Tags

	dataAO1.Thumbnail = m.Thumbnail

	dataAO1.UserPermissions = m.UserPermissions

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this album
func (m *Album) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectReference
	if err := m.ObjectReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Album) validateBucket(formats strfmt.Registry) error {

	if err := validate.Required("bucket", "body", m.Bucket); err != nil {
		return err
	}

	return nil
}

func (m *Album) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Album) validateGroupPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupPermissions) { // not required
		return nil
	}

	if m.GroupPermissions != nil {
		if err := m.GroupPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group_permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group_permissions")
			}
			return err
		}
	}

	return nil
}

func (m *Album) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Album) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Album) validateUserPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.UserPermissions) { // not required
		return nil
	}

	if m.UserPermissions != nil {
		if err := m.UserPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_permissions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this album based on the context it is used
func (m *Album) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectReference
	if err := m.ObjectReference.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupPermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserPermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Album) contextValidateGroupPermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.GroupPermissions != nil {
		if err := m.GroupPermissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group_permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group_permissions")
			}
			return err
		}
	}

	return nil
}

func (m *Album) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Album) contextValidateUserPermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.UserPermissions != nil {
		if err := m.UserPermissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Album) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Album) UnmarshalBinary(b []byte) error {
	var res Album
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
