// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VersionMetadata version metadata
//
// swagger:model VersionMetadata
type VersionMetadata struct {
	ObjectReference

	// collections
	Collections []*VersionMetadataCollectionsItems0 `json:"collections"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VersionMetadata) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ObjectReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ObjectReference = aO0

	// AO1
	var dataAO1 struct {
		Collections []*VersionMetadataCollectionsItems0 `json:"collections"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Collections = dataAO1.Collections

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VersionMetadata) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ObjectReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Collections []*VersionMetadataCollectionsItems0 `json:"collections"`
	}

	dataAO1.Collections = m.Collections

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this version metadata
func (m *VersionMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectReference
	if err := m.ObjectReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollections(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionMetadata) validateCollections(formats strfmt.Registry) error {

	if swag.IsZero(m.Collections) { // not required
		return nil
	}

	for i := 0; i < len(m.Collections); i++ {
		if swag.IsZero(m.Collections[i]) { // not required
			continue
		}

		if m.Collections[i] != nil {
			if err := m.Collections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("collections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("collections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this version metadata based on the context it is used
func (m *VersionMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectReference
	if err := m.ObjectReference.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCollections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionMetadata) contextValidateCollections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Collections); i++ {

		if m.Collections[i] != nil {
			if err := m.Collections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("collections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("collections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionMetadata) UnmarshalBinary(b []byte) error {
	var res VersionMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VersionMetadataCollectionsItems0 version metadata collections items0
//
// swagger:model VersionMetadataCollectionsItems0
type VersionMetadataCollectionsItems0 struct {
	ObjectReference
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VersionMetadataCollectionsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ObjectReference
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ObjectReference = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VersionMetadataCollectionsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ObjectReference)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this version metadata collections items0
func (m *VersionMetadataCollectionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectReference
	if err := m.ObjectReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this version metadata collections items0 based on the context it is used
func (m *VersionMetadataCollectionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ObjectReference
	if err := m.ObjectReference.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VersionMetadataCollectionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionMetadataCollectionsItems0) UnmarshalBinary(b []byte) error {
	var res VersionMetadataCollectionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
